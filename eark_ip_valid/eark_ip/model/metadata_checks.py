# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from eark_ip.model.base_model_ import Model
from eark_ip.model.metadata_status import MetadataStatus  # noqa: F401,E501
from eark_ip.model.test_result import TestResult  # noqa: F401,E501
from eark_ip import util


class MetadataChecks(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: MetadataStatus=None, messages: List[TestResult]=None):  # noqa: E501
        """MetadataChecks - a model defined in Swagger

        :param status: The status of this MetadataChecks.  # noqa: E501
        :type status: MetadataStatus
        :param messages: The messages of this MetadataChecks.  # noqa: E501
        :type messages: List[TestResult]
        """
        self.swagger_types = {
            'status': MetadataStatus,
            'messages': List[TestResult]
        }

        self.attribute_map = {
            'status': 'status',
            'messages': 'messages'
        }
        self._status = status
        self._messages = messages

    @classmethod
    def from_dict(cls, dikt) -> 'MetadataChecks':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The metadataChecks of this MetadataChecks.  # noqa: E501
        :rtype: MetadataChecks
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> MetadataStatus:
        """Gets the status of this MetadataChecks.


        :return: The status of this MetadataChecks.
        :rtype: MetadataStatus
        """
        return self._status

    @status.setter
    def status(self, status: MetadataStatus):
        """Sets the status of this MetadataChecks.


        :param status: The status of this MetadataChecks.
        :type status: MetadataStatus
        """

        self._status = status

    @property
    def messages(self) -> List[TestResult]:
        """Gets the messages of this MetadataChecks.


        :return: The messages of this MetadataChecks.
        :rtype: List[TestResult]
        """
        return self._messages

    @messages.setter
    def messages(self, messages: List[TestResult]):
        """Sets the messages of this MetadataChecks.


        :param messages: The messages of this MetadataChecks.
        :type messages: List[TestResult]
        """

        self._messages = messages
