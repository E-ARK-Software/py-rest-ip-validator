# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from eark_ip.model.base_model_ import Model
from eark_ip.model.information_package import InformationPackage  # noqa: F401,E501
from eark_ip.model.metadata_results import MetadataResults  # noqa: F401,E501
from eark_ip.model.struct_results import StructResults  # noqa: F401,E501
from eark_ip import util


class ValidationReport(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uid: str=None, package: InformationPackage=None, structure: StructResults=None, metadata: MetadataResults=None):  # noqa: E501
        """ValidationReport - a model defined in Swagger

        :param uid: The uid of this ValidationReport.  # noqa: E501
        :type uid: str
        :param package: The package of this ValidationReport.  # noqa: E501
        :type package: InformationPackage
        :param structure: The structure of this ValidationReport.  # noqa: E501
        :type structure: StructResults
        :param metadata: The metadata of this ValidationReport.  # noqa: E501
        :type metadata: MetadataResults
        """
        self.swagger_types = {
            'uid': str,
            'package': InformationPackage,
            'structure': StructResults,
            'metadata': MetadataResults
        }

        self.attribute_map = {
            'uid': 'uid',
            'package': 'package',
            'structure': 'structure',
            'metadata': 'metadata'
        }
        self._uid = uid
        self._package = package
        self._structure = structure
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'ValidationReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The validationReport of this ValidationReport.  # noqa: E501
        :rtype: ValidationReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self) -> str:
        """Gets the uid of this ValidationReport.


        :return: The uid of this ValidationReport.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid: str):
        """Sets the uid of this ValidationReport.


        :param uid: The uid of this ValidationReport.
        :type uid: str
        """

        self._uid = uid

    @property
    def package(self) -> InformationPackage:
        """Gets the package of this ValidationReport.


        :return: The package of this ValidationReport.
        :rtype: InformationPackage
        """
        return self._package

    @package.setter
    def package(self, package: InformationPackage):
        """Sets the package of this ValidationReport.


        :param package: The package of this ValidationReport.
        :type package: InformationPackage
        """

        self._package = package

    @property
    def structure(self) -> StructResults:
        """Gets the structure of this ValidationReport.


        :return: The structure of this ValidationReport.
        :rtype: StructResults
        """
        return self._structure

    @structure.setter
    def structure(self, structure: StructResults):
        """Sets the structure of this ValidationReport.


        :param structure: The structure of this ValidationReport.
        :type structure: StructResults
        """

        self._structure = structure

    @property
    def metadata(self) -> MetadataResults:
        """Gets the metadata of this ValidationReport.


        :return: The metadata of this ValidationReport.
        :rtype: MetadataResults
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: MetadataResults):
        """Sets the metadata of this ValidationReport.


        :param metadata: The metadata of this ValidationReport.
        :type metadata: MetadataResults
        """

        self._metadata = metadata
